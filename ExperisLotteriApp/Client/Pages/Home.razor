@page "/"
@using Client.Services
@using Shared.DTO
@inject ITicketService TicketService
@inject NavigationManager NavManager

<h3>Available Tickets: @TicketsCount?.AvailableTickets</h3>
<h3>Reserved Tickets: @TicketsCount?.ReservedTickets</h3>
<h3>On Hold Tickets: @TicketsCount?.OnHoldTickets</h3>

<div class="mt-4">
    <label>Your Name:</label>
    <input type="text" @bind="userName" class="form-control" />
</div>

<div class="mt-4">
    <label>How many tickets do you want to hold (1–10)?</label>
    <input type="number" min="1" max="10" @bind="ticketsToHold" class="form-control" />
</div>

<div class="mt-2">
    <button class="btn btn-primary" @onclick="ReserveTickets" disabled="@IsReserveDisabled">Reserve</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

@code {
    private AvailableTicketsDTO? TicketsCount;
    private int ticketsToHold = 1;
    private string userName = string.Empty;
    private string? errorMessage;

    private bool IsReserveDisabled => string.IsNullOrWhiteSpace(userName);

    protected override async Task OnInitializedAsync()
    {
        TicketsCount = await TicketService.GetAvailableCountAsync();
    }

    private async Task ReserveTickets()
    {
        errorMessage = null;

        if (string.IsNullOrWhiteSpace(userName))
        {
            errorMessage = "Name is required.";
            return;
        }

        try
        {
            var heldTickets = await TicketService.HoldTicketsAsync(ticketsToHold);
            if (heldTickets.Any())
            {
                var ids = string.Join(",", heldTickets.Select(t => t.Number));
                NavManager.NavigateTo($"/hold-confirmation?ids={ids}&name={Uri.EscapeDataString(userName)}");
            }
            else
            {
                errorMessage = "No tickets could be reserved.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
